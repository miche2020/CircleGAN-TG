import logging
import torch
from aiogram import types
from PIL import Image
import io
import numpy as np
from bot.keyboards import get_style_strength_keyboard, get_result_keyboard
from utils.preprocessing import tensor_to_image

async def process_style_transfer(callback_query: types.CallbackQuery, user_images: dict, model):
    try:
        parts = callback_query.data.split('_')
        alpha = float(parts[1])
        user_id = int(parts[2])
        
        if user_id not in user_images or 'content' not in user_images[user_id] or 'style' not in user_images[user_id]:
            await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        await callback_query.message.answer("üé® –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        
        with torch.no_grad():
            output = model.generate(
                user_images[user_id]['content'],
                user_images[user_id]['style'],
                alpha=alpha
            )
            
            output_array = tensor_to_image(output)
            output_image = Image.fromarray((output_array * 255).astype(np.uint8))
            
            img_bio = io.BytesIO()
            output_image.save(img_bio, 'JPEG')
            img_bio.seek(0)
            
            keyboard = get_result_keyboard(user_id)
            
            await callback_query.message.answer_photo(
                photo=img_bio,
                caption=f"‚ú® –ì–æ—Ç–æ–≤–æ! –°—Ç–µ–ø–µ–Ω—å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏: {'–Ω–∏–∑–∫–∞—è' if alpha == 0.5 else '—Å—Ä–µ–¥–Ω—è—è' if alpha == 1.0 else '–≤—ã—Å–æ–∫–∞—è'}",
                reply_markup=keyboard
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")
        await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")

async def clear_images_callback(callback_query: types.CallbackQuery, user_images: dict):
    try:
        _, user_id = callback_query.data.split('_')
        user_id = int(user_id)
        
        if user_id in user_images:
            user_images[user_id] = {}
            await callback_query.message.answer(
                "‚ú® –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã!\n"
                "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
                "2. –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∏–ª—è"
            )
        await callback_query.answer()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(e)}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")

async def retry_style_transfer(callback_query: types.CallbackQuery):
    try:
        _, user_id = callback_query.data.split('_')
        user_id = int(user_id)
        
        keyboard = get_style_strength_keyboard(user_id)
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–µ–ø–µ–Ω—å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏:", reply_markup=keyboard)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
