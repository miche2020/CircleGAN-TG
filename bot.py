import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from dotenv import load_dotenv
import os
from utils.preprocessing import preprocess_image, tensor_to_image
import torch
from PIL import Image
import io
import numpy as np
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from models.model_handler import StyleTransferModel
from config import MODEL_PATH

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=os.getenv('BOT_TOKEN'))
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–¥–µ–ª–∏
model_handler = StyleTransferModel(MODEL_PATH)
model = model_handler.model

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_images = {}

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    welcome_text = """
    –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç–∏–ª—è. –í–æ—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:
    
    /start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    /check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    /clear - –æ—á–∏—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:
    1. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∏–ª–∏–∑–æ–≤–∞—Ç—å)
    2. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∏–ª—è (–æ—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å —Å—Ç–∏–ª—å)
    """
    await message.reply(welcome_text)

@dp.message_handler(commands=['clear'])
async def clear_images(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_images:
        user_images[user_id] = {}
        await message.reply("‚ú® –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ!")
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")

@dp.message_handler(commands=['check'])
async def check_images(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_images:
        await message.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        return

    status = "–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:\n"
    if 'content' in user_images[user_id]:
        status += "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n"
    else:
        status += "‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n"
        
    if 'style' in user_images[user_id]:
        status += "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∏–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n"
    else:
        status += "‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∏–ª—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n"
        
    await message.reply(status)

@dp.message_handler(content_types=['photo'])
async def handle_photo(message: types.Message):
    try:
        user_id = message.from_user.id
        photo = message.photo[-1]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(photo.file_id)
        downloaded_file = await bot.download_file(file.file_path)
        
        # –°–æ–∑–¥–∞–µ–º BytesIO –æ–±—ä–µ–∫—Ç –∏–∑ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        image_bytes = io.BytesIO(downloaded_file.read())
        
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            processed_image = preprocess_image(image_bytes)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in user_images:
                user_images[user_id] = {}
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if 'content' not in user_images[user_id]:
                user_images[user_id]['content'] = processed_image
                await message.reply("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∏–ª—è.")
            
            elif 'style' not in user_images[user_id]:
                user_images[user_id]['style'] = processed_image
                keyboard = InlineKeyboardMarkup(row_width=1)
                keyboard.add(
                    InlineKeyboardButton("üîÖ –ù–∏–∑–∫–∞—è (0.5)", callback_data=f"style_0.5_{user_id}"),
                    InlineKeyboardButton("‚ú® –°—Ä–µ–¥–Ω—è—è (1.0)", callback_data=f"style_1.0_{user_id}"),
                    InlineKeyboardButton("üí´ –í—ã—Å–æ–∫–∞—è (4.0)", callback_data=f"style_4.0_{user_id}")
                )
                await message.reply("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∏–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–µ–ø–µ–Ω—å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏:", reply_markup=keyboard)
            
            else:
                keyboard = InlineKeyboardMarkup()
                keyboard.add(InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=f"clear_{user_id}"))
                await message.reply(
                    "–£ –≤–∞—Å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –æ–±–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ:",
                    reply_markup=keyboard
                )
                
        except Exception as img_error:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(img_error)}")
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            return
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

@dp.callback_query_handler(lambda c: c.data.startswith('style_'))
async def process_style_transfer(callback_query: types.CallbackQuery):
    try:
        parts = callback_query.data.split('_')
        alpha = float(parts[1])
        user_id = int(parts[2])
        
        if user_id not in user_images or 'content' not in user_images[user_id] or 'style' not in user_images[user_id]:
            await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        await callback_query.message.answer("üé® –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with torch.no_grad():
            output = model.generate(
                user_images[user_id]['content'],
                user_images[user_id]['style'],
                alpha=alpha
            )
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            output_array = tensor_to_image(output)
            output_image = Image.fromarray((output_array * 255).astype(np.uint8))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
            img_bio = io.BytesIO()
            output_image.save(img_bio, 'JPEG')
            img_bio.seek(0)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=f"clear_{user_id}"),
                InlineKeyboardButton("üé® –î—Ä—É–≥–∞—è —Å—Ç–µ–ø–µ–Ω—å", callback_data=f"retry_{user_id}")
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await callback_query.message.answer_photo(
                photo=img_bio,
                caption=f"‚ú® –ì–æ—Ç–æ–≤–æ! –°—Ç–µ–ø–µ–Ω—å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏: {'–Ω–∏–∑–∫–∞—è' if alpha == 0.5 else '—Å—Ä–µ–¥–Ω—è—è' if alpha == 1.0 else '–≤—ã—Å–æ–∫–∞—è'}",
                reply_markup=keyboard
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")
        await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")

@dp.callback_query_handler(lambda c: c.data.startswith('clear_'))
async def clear_images_callback(callback_query: types.CallbackQuery):
    try:
        _, user_id = callback_query.data.split('_')
        user_id = int(user_id)
        
        if user_id in user_images:
            user_images[user_id] = {}
            await callback_query.message.answer(
                "‚ú® –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã!\n"
                "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
                "2. –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∏–ª—è"
            )
        await callback_query.answer()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(e)}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")

@dp.callback_query_handler(lambda c: c.data.startswith('retry_'))
async def retry_style_transfer(callback_query: types.CallbackQuery):
    try:
        _, user_id = callback_query.data.split('_')
        user_id = int(user_id)
        
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("üîÖ –ù–∏–∑–∫–∞—è (0.5)", callback_data=f"style_0.5_{user_id}"),
            InlineKeyboardButton("‚ú® –°—Ä–µ–¥–Ω—è—è (1.0)", callback_data=f"style_1.0_{user_id}"),
            InlineKeyboardButton("üí´ –í—ã—Å–æ–∫–∞—è (4.0)", callback_data=f"style_4.0_{user_id}")
        )
        
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–µ–ø–µ–Ω—å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏:", reply_markup=keyboard)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True) 